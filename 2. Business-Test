관련 개발 순서에 따라 가장 기본적으로 프로젝트 진행시 흐름을 잘 이해하기 쉽게 정리 해보는 것이다.

1. 비즈니스 요구사항 정리
 -. 데이터 : 이름, 성별, 나이등 
 -. 기능 : 회원등록, 조회
 -. 데이터 선정 X (Memory리포지토리에서 구현 (임시용))

2. 회원 도메인과 리포지토리 만들기
 -. Optional >> String or 객체등 받을때 null일 경우 Npe 가 발생하는데 그것을 방지해줌. 

3. 회원 리포지토리 테스트 케이스 작성
 -. 내가 작성한 것이 코드로 잘 구현될까? ->> main 메소드 or 컨트롤러를 통해 테스트를 하는데 너무 오래 걸리는게 문제점
   -> 그래서 자바에서는 JUnit이라는 프레임워크로 테스트를 실행하여 이러한 문제를 해결한다.
 -. src -> test -> java -> JUnit 를 이용해서 테스트케이스를 만든다. 
   -> class를 만들고 저장소 @Test ->> 하나의 유닛 테스트 , @AfterEach 하나의 유닛 테스트 후 실행 할 내용 
   -> Assertions.assertThat(테스트 할 내용).isEqualto(테스트 값); 으로 하여 많이 테스트 한다.
 -. shift + f6 -> 같은 이름 한번에 변경하기.
 -. 아래 코드는 예시 코드이다. 이해 안가면 아래 내용 보면서 확인 하면 된다.

 '''
  package hell.hellospring.repository;

  import hell.hellospring.domain.Member;
  import org.junit.jupiter.api.AfterEach;
  import org.junit.jupiter.api.Test;
  import java.util.List;
  import static org.assertj.core.api.Assertions.*;
  
  public class memoryMemberRepositoryTest {
  
      MemoryMemberReopsitory repository = new MemoryMemberReopsitory();
  
      @AfterEach
      public void afterEach(){
          repository.clearStore();
      }
  
      @Test
      public void Save(){
          Member member =new Member();
          member.setName("Spring");
          repository.Save(member);
          Member result  = repository.findById(member.getId()).get();
          assertThat(member).isEqualTo(result);
      }
  
      @Test
      public void findByName(){
          Member member1 = new Member();
          member1.setName("spring1");
          repository.Save(member1);
  
          Member member2 = new Member();
          member2.setName("spring2");
          repository.Save(member2);
  
          Member result = repository.findByName("spring1").get();
  
          assertThat(result).isEqualTo(member1);
      }
  
      @Test
      public void findAll(){
          Member member1 = new Member();
          member1.setName("spring1");
          repository.Save(member1);
  
          Member member2 = new Member();
          member2.setName("spring2");
          repository.Save(member2);
  
          List<Member> result = repository.findAll();
  
          assertThat(result.size()).isEqualTo(2);
      }  
  }
'''

4. 회원 서비스 개발 && 회원 서비스 테스트
 -. intelliJ > ctrl + alt + v >> 리턴 값을 자동으로 만들어 준다. 
 -. intelliJ > Ctrl + Shift + alt + T >> 코드 리팩토링 하는 단축키 >> Extract Method 기존에 구현한 코드가 있으면 따로 함수로 만들어 준다.
 -. service는 좀 더 비지니스 적인 기능에 사용 
 -. repository 좀 더 데이터를 넣거나 하는 기능에 사용
 -. class명 선택 후 ctrl + shift + T create Test >> 자동으로 유닛테스트 코드 만들어 준다.
 -. shift + f10 >> 전에 실행 했던 테스트 다시 재시

'''
package hell.hellospring.repository;

import hell.hellospring.domain.Member;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.assertj.core.api.Assertions.*;

public class memoryMemberRepositoryTest {

    MemoryMemberReopsitory repository = new MemoryMemberReopsitory();

    @AfterEach
    public void afterEach(){
        repository.clearStore();
    }

    @Test
    public void Save(){
        Member member =new Member();
        member.setName("Spring");
        repository.Save(member);
        Member result  = repository.findById(member.getId()).get();
        assertThat(member).isEqualTo(result);
    }

    @Test
    public void findByName(){
        Member member1 = new Member();
        member1.setName("spring1");
        repository.Save(member1);

        Member member2 = new Member();
        member2.setName("spring2");
        repository.Save(member2);

        Member result = repository.findByName("spring1").get();

        assertThat(result).isEqualTo(member1);
    }

    @Test
    public void findAll(){
        Member member1 = new Member();
        member1.setName("spring1");
        repository.Save(member1);

        Member member2 = new Member();
        member2.setName("spring2");
        repository.Save(member2);

        List<Member> result = repository.findAll();

        assertThat(result.size()).isEqualTo(2);
    }


}
'''




